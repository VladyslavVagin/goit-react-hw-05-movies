{"version":3,"file":"static/js/538.4774f260.chunk.js","mappings":"wRAEaA,EAAaC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uJAUtBC,EAAQH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yaAgBjBG,EAAcL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2BAIxBK,EAAYP,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,sOAYpBO,EAAiBT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0J,kBCsBtC,EA3Da,WACX,IAAAS,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAAsCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC1BG,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEM,OAFNF,EAAAC,KAAA,EAEfZ,GAAe,GAAMW,EAAAE,KAAA,GACEC,EAAAA,EAAAA,IAAUb,GAAS,KAAD,EAAnCQ,EAAQE,EAAAI,KAEY,KADpBL,EAAaD,EAASO,KAAKC,MAClBC,QACbtB,EAAUc,GACXC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,SAEDS,QAAQC,IAAGV,EAAAQ,IAAQ,QAEG,OAFHR,EAAAC,KAAA,GAEnBZ,GAAe,GAAOW,EAAAW,OAAA,6BAAAX,EAAAY,OAAA,GAAAf,EAAA,wBAEzB,kBAbe,OAAAH,EAAAmB,MAAA,KAAAC,UAAA,KAehBrB,GACF,GAAG,CAACH,IAIJ,OACEyB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG5B,IAAe6B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACrB9B,IACA6B,EAAAA,EAAAA,KAACjD,EAAU,CAAAgD,SACRhC,EAAOuB,OAAS,EACfvB,EAAOmC,KAAI,SAAAC,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAWC,EAAEJ,EAAFI,GAAE,OAC7CT,EAAAA,EAAAA,MAAC3C,EAAK,CAAA4C,SAAA,EACJC,EAAAA,EAAAA,KAAC3C,EAAW,CACVmD,IAAKJ,EAXE,mCAW8BA,E,8qXACrCK,IAAKJ,KAEPP,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACzC,EAAS,CAAAwC,SAAEM,GAAQ,aACpBP,EAAAA,EAAAA,MAACrC,EAAc,CAAAsC,SAAA,CACZ,KACDC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAoB,KAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKO,GAAa,oBAVZC,EAaJ,KAGVP,EAAAA,EAAAA,KAAA,KAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,sCAOtB,C,wNC9DMW,EAAU,mCACVC,EAAW,+BACJC,EAAiB,mCAEtB,SAAeC,IAAgB,OAAAC,EAAAlB,MAAC,KAADC,UAAA,CAKtC,SAAAiB,IAAA,OAAAA,GAAApC,EAAAA,EAAAA,GAAAC,IAAAA,MALO,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACiB8B,EAAAA,EAAAA,GAAM,GAADC,OACvBL,EAAQ,gCAAAK,OAA+BN,IAC1C,KAAD,EAFa,OAAR7B,EAAQE,EAAAI,KAAAJ,EAAAkC,OAAA,SAGPpC,GAAQ,wBAAAE,EAAAY,OAAA,GAAAf,EAAA,MAChBgB,MAAA,KAAAC,UAAA,CAEM,SAAeqB,EAAcC,EAAAC,GAAA,OAAAC,EAAAzB,MAAC,KAADC,UAAA,CAKnC,SAAAwB,IAAA,OAAAA,GAAA3C,EAAAA,EAAAA,GAAAC,IAAAA,MALM,SAAA2C,EAA8BC,EAAOC,GAAI,IAAA3C,EAAA,OAAAF,IAAAA,MAAA,SAAA8C,GAAA,cAAAA,EAAAzC,KAAAyC,EAAAxC,MAAA,cAAAwC,EAAAxC,KAAA,GACvB8B,EAAAA,EAAAA,GAAM,GAADC,OACvBL,EAAQ,wBAAAK,OAAuBO,EAAK,UAAAP,OAASQ,EAAI,aAAAR,OAAYN,IAChE,KAAD,EAFa,OAAR7B,EAAQ4C,EAAAtC,KAAAsC,EAAAR,OAAA,SAGPpC,GAAQ,wBAAA4C,EAAA9B,OAAA,GAAA2B,EAAA,MAChB1B,MAAA,KAAAC,UAAA,CAEO,SAAe6B,EAAeC,GAAA,OAAAC,EAAAhC,MAAC,KAADC,UAAA,CAKrC,SAAA+B,IAAA,OAAAA,GAAAlD,EAAAA,EAAAA,GAAAC,IAAAA,MALO,SAAAkD,EAA+BxD,GAAO,IAAAQ,EAAA,OAAAF,IAAAA,MAAA,SAAAmD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cAAA6C,EAAA7C,KAAA,GACrB8B,EAAAA,EAAAA,GAAM,GAADC,OACvBL,EAAQ,WAAAK,OAAU3C,EAAO,aAAA2C,OAAYN,IACxC,KAAD,EAFa,OAAR7B,EAAQiD,EAAA3C,KAAA2C,EAAAb,OAAA,SAGPpC,GAAQ,wBAAAiD,EAAAnC,OAAA,GAAAkC,EAAA,MAChBjC,MAAA,KAAAC,UAAA,CAEO,SAAeX,EAAS6C,GAAA,OAAAC,EAAApC,MAAC,KAADC,UAAA,CAK/B,SAAAmC,IAAA,OAAAA,GAAAtD,EAAAA,EAAAA,GAAAC,IAAAA,MALO,SAAAsD,EAAyB5D,GAAO,IAAAQ,EAAA,OAAAF,IAAAA,MAAA,SAAAuD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,GACf8B,EAAAA,EAAAA,GAAM,GAADC,OACvBL,EAAQ,WAAAK,OAAU3C,EAAO,qBAAA2C,OAAoBN,IAChD,KAAD,EAFa,OAAR7B,EAAQqD,EAAA/C,KAAA+C,EAAAjB,OAAA,SAGPpC,GAAQ,wBAAAqD,EAAAvC,OAAA,GAAAsC,EAAA,MAChBrC,MAAA,KAAAC,UAAA,CAEO,SAAesC,EAAeC,GAAA,OAAAC,EAAAzC,MAAC,KAADC,UAAA,CAKrC,SAAAwC,IAAA,OAAAA,GAAA3D,EAAAA,EAAAA,GAAAC,IAAAA,MALO,SAAA2D,EAA+BjE,GAAO,IAAAQ,EAAA,OAAAF,IAAAA,MAAA,SAAA4D,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAtD,KAAA,GACrB8B,EAAAA,EAAAA,GAAM,GAADC,OACvBL,EAAQ,WAAAK,OAAU3C,EAAO,qBAAA2C,OAAoBN,IAChD,KAAD,EAFa,OAAR7B,EAAQ0D,EAAApD,KAAAoD,EAAAtB,OAAA,SAGPpC,GAAQ,wBAAA0D,EAAA5C,OAAA,GAAA2C,EAAA,MAChB1C,MAAA,KAAAC,UAAA,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/request-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListActors = styled.ul`\n  width: 100%;\n  list-style-type: none;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  gap: 20px 8px;\n  padding: 0;\n`;\n\nexport const Actor = styled.li`\n  max-width: 200px;\n  margin: 0 auto;\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border: 2px solid #e0921c;\n  background-color: #696969;\n  border-radius: 20px;\n  padding: 10px;\n  -webkit-box-shadow: 1px 8px 21px 1px rgba(255, 153, 0, 1);\n  -moz-box-shadow: 1px 8px 21px 1px rgba(255, 153, 0, 1);\n  box-shadow: 1px 8px 21px 1px rgba(255, 153, 0, 1);\n`;\n\nexport const AvatarActor = styled.img`\n  width: 200px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  background-color: #e0921c;\n  border-radius: 20px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\nexport const ActorCharacter = styled.p`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  background-color: #e0921c;\n  padding: 6px;\n  border-radius: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from 'services/request-api';\nimport avatarAct from '../../images/avatar.jpg';\nimport { ListActors, Actor, AvatarActor, ActorName, ActorCharacter } from './Cast.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [castLoading, setCastLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const showActors = async () => {\n      try {\n        setCastLoading(true);\n        const response = await getActors(movieId);\n        const actorsData = response.data.cast;\n        if (actorsData.length !== 0) {\n          setActors(actorsData);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setCastLoading(false);\n      }\n    };\n\n    showActors();\n  }, [movieId]);\n\n  const base_url_image = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <div>\n      {castLoading && <Loader />}\n      {!castLoading && (\n        <ListActors>\n          {actors.length > 0 ? (\n            actors.map(({ profile_path, name, character, id }) => (\n              <Actor key={id}>\n                <AvatarActor\n                  src={profile_path ? base_url_image + profile_path : avatarAct}\n                  alt={name}\n                />\n                <div>\n                  <ActorName>{name || 'unknown'}</ActorName>\n                  <ActorCharacter>\n                    {' '}\n                    <strong>Character:</strong>{' '}\n                    <em>{character || 'unknown'}</em>\n                  </ActorCharacter>\n                </div>\n              </Actor>\n            ))\n          ) : (\n            <p>\n              <strong>No information about actors</strong>\n            </p>\n          )}\n        </ListActors>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '8c011024daf9ab6b31dbbb1d29e7525a';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nexport const base_url_image = 'https://image.tmdb.org/t/p/w500/';\n\n export async function getMoviesPopular() {\n  const response = await axios(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport async function getMovieSearch(query, page) {\n  const response = await axios(\n    `${BASE_URL}/search/movie?query=${query}&page=${page}&api_key=${API_KEY}`\n  );\n  return response;\n}\n\n export async function getMovieDetails(movieId) {\n  const response = await axios(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return response;\n}\n\n export async function getActors(movieId) {\n  const response = await axios(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response;\n}\n\n export async function getMovieReviews(movieId) {\n  const response = await axios(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n}\n"],"names":["ListActors","styled","_templateObject","_taggedTemplateLiteral","Actor","_templateObject2","AvatarActor","_templateObject3","ActorName","_templateObject4","ActorCharacter","_templateObject5","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","castLoading","setCastLoading","movieId","useParams","useEffect","showActors","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","actorsData","_context","prev","next","getActors","sent","data","cast","length","t0","console","log","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","_ref2","profile_path","name","character","id","src","alt","API_KEY","BASE_URL","base_url_image","getMoviesPopular","_getMoviesPopular","axios","concat","abrupt","getMovieSearch","_x","_x2","_getMovieSearch","_callee2","query","page","_context2","getMovieDetails","_x3","_getMovieDetails","_callee3","_context3","_x4","_getActors","_callee4","_context4","getMovieReviews","_x5","_getMovieReviews","_callee5","_context5"],"sourceRoot":""}